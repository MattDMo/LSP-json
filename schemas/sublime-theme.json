{
    "$id": "sublime://schemas/sublime-theme",
    "$schema": "sublime://schemas/sublime-base",
    "allowComments": true,
    "allowTrailingCommas": true,
    "definitions": {
        "ATTRIBUTES": {
            "items": {
                "type": "string"
            },
            "markdownDescription": "Attributes are specified as an array of strings. Each string is an attribute name. To check for the absence of an attribute, prepend a `!` to the name.",
            "type": "array"
        },
        "CLASS_NAMES": {
            "enum": [
                "title_bar",
                "window",
                "edit_window",
                "switch_project_window",
                "sidebar_container",
                "sidebar_tree",
                "tree_row",
                "sidebar_heading",
                "file_system_entry",
                "sidebar_label",
                "close_button",
                "disclosure_button_control",
                "icon_folder",
                "icon_folder_loading",
                "icon_folder_dup",
                "icon_file_type",
                "vcs_status_badge",
                "tabset_control",
                "tab_control",
                "tab_label",
                "tab_close_button",
                "scroll_tabs_left_button",
                "scroll_tabs_right_button",
                "show_tabs_dropdown_button",
                "overlay_control",
                "overlay_control goto_file",
                "overlay_control goto_symbol",
                "overlay_control goto_symbol_in_project",
                "overlay_control goto_line",
                "overlay_control goto_word",
                "overlay_control goto_line",
                "overlay_control command_palette",
                "quick_panel",
                "mini_quick_panel_row",
                "quick_panel_row",
                "kind_container",
                "kind_container kind_ambiguous",
                "kind_container kind_keyword",
                "kind_container kind_type",
                "kind_container kind_function",
                "kind_container kind_namespace",
                "kind_container kind_navigation",
                "kind_container kind_markup",
                "kind_container kind_variable",
                "kind_container kind_snippet",
                "kind_label",
                "symbol_container",
                "quick_panel_label",
                "quick_panel_path_label",
                "text_area_control",
                "grid_layout_control",
                "minimap_control",
                "fold_button_control",
                "popup_control auto_complete_popup",
                "popup_control html_popup",
                "auto_complete",
                "table_row",
                "trigger_container",
                "auto_complete_label",
                "auto_complete_label auto_complete_hint",
                "auto_complete_detail_pane",
                "auto_complete_info",
                "auto_complete_kind_name_label",
                "auto_complete_details",
                "panel_control find_panel",
                "panel_control replace_panel",
                "panel_control find_in_files_panel",
                "panel_control input_panel",
                "panel_control console_panel",
                "panel_control output_panel",
                "panel_control switch_project_panel",
                "panel_grid_control",
                "panel_close_button",
                "status_bar",
                "panel_button_control",
                "sidebar_button_control",
                "status_container",
                "status_button",
                "vcs_status",
                "vcs_branch_icon",
                "vcs_changes_annotation",
                "dialog",
                "progress_bar_control",
                "progress_gauge_control",
                "scroll_area_control",
                "scroll_bar_control",
                "scroll_track_control",
                "scroll_corner_control",
                "puck_control",
                "text_line_control",
                "dropdown_button_control",
                "button_control",
                "icon_button_group",
                "icon_button_control",
                "icon_regex",
                "icon_case",
                "icon_whole_word",
                "icon_wrap",
                "icon_in_selection",
                "icon_highlight",
                "icon_preserve_case",
                "icon_context",
                "icon_use_buffer",
                "label_control",
                "title_label_control",
                "tool_tip_control",
                "tool_tip_label_control",
                "quick_panel_entry",
                "quick_panel_detail_label",
                "quick_panel_label hint",
                "quick_panel_label key_binding",
                "popup_shadow",
                "auto_complete_hint",
                "icon_use_gitignore",
                "annotation_close_button",
                "popup_control",
                "panel_control",
                "overlay_control kind_info"
            ],
            "markdownEnumDescriptions": [
                "Only supported on OS X 10.10+.",
                "This element can not be styled directly, however it can be used in a parents specifier. The luminosity attributes are set based on the global color scheme.",
                "This element contains the main editor window, and is intended for use in a parents specifier.",
                "This element contains the Switch Project window, and is intended for use in a parents specifier.",
                "The primary sidebar container that handles scrolling",
                "A tree control containing multiple `tree_row`s",
                "A row may contain a header, open file, folder or file",
                "One of the \"Open Files\", \"Group #\" or \"Folders\" headings in the sidebar",
                "The container holding information about a file or folder in the sidebar. Contains different controls based on which section of the sidebar it is within.\n\nWithin the _Open Files_ section, this control will contain a `sidebar_label` with the file name, plus possibly a `vcs_status_badge`.\n\nWithin the _Folders_ section, this control will contain a folder or file icon (either `icon_folder`, `icon_folder_loading`, `icon_folder_dup` or `icon_file_type`), a `sidebar_label` with the file or folder name, plus possibly a `vcs_status_badge`.",
                "Names of open files, folder names and filenames",
                "A button to the left of each file in the _Open Files_ section",
                "An expand/collapse icon present in all `tree_rows` that can be expanded",
                "Used for a folder once the contents have been fully enumerated",
                "Used for a folder while the contents are being enumerated",
                "Used for a folder that has been scanned previously in the sidebar. _This is necessary to prevent a possibly infinite list of files due to recursive symlinks_.",
                "The icon for a file. The `layer0.texture` should not be set since it is determined dynamically based on the `icon` setting provided by _.tmPreferences_ files.",
                "An icon contained within `file_system_entry` that is used to display the status of a file or folder with regards to a Git repository it is contained in. This icon will only be shown if the setting `show_git_status` is `true`, the file is contained within a Git repository, and the file has some sort of special state within the repository. _A file that is not shown via git status and is not ignored via a .gitignore rule will have no icon_.",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "The container for the quick panel, including the input and data table",
                "The Goto File quick panel",
                "The Goto Symbol quick panel",
                "The Goto Symbol in Project quick panel",
                "The Goto Line quick panel",
                "The Goto Line quick panel",
                "The Goto Anything quick panel, filtering by word",
                "The Command Palette",
                "The data table displayed below the input. Normally the height is dynamic so the layers will not be visible, however the Switch Project window will use layers for the blank space below the filtered options.",
                "A non-file row in `quick_panel`. Contains one `quick_panel_label` for each line of text in the row.",
                "A Goto Anything file row in `quick_panel`. Also used in the Switch Project window.\n\n Contains `quick_panel_label` with the filename, and `quick_panel_path_label` for the file path.",
                "A container shown to the left of the symbols in the Goto Symbol and Goto Symbol in Project quick panels. It contains the `kind_label` and is used to indicate the kind of the symbol.\n\n_This element is also used in `auto_complete` to show the kind of the item being inserted. A \"parents\" key should be used to distinguish the two uses._",
                "When the kind of the item is unknown",
                "When the item is a keyword ",
                "When the item is a data type, class, struct, interface, enum, trait, etc",
                "When the item is a function, method, constructor or subroutine",
                "When the item is a namespace or module",
                "When the item is a definition, label or section",
                "When the item is a markup component, including HTML tags and CSS selectors",
                "When the item is a variable, member, attribute, constant or parameter",
                "When the item is a snippet",
                "A label showing a single unicode character, contained within the `kind_container`\n\n_This element is also used in `auto_complete` to show the kind of the item being inserted. A \"parents\" key should be used to distinguish the two uses._",
                "A container around the `quick_panel_label` when showing the Goto Symbol or Goto Symbol in Project symbol lists",
                "Filenames in `quick_panel_row` and all text in `mini_quick_panel_row`",
                "File paths in `quick_panel_row`",
                "This element can not be styled directly since that is controlled by the color scheme, however it can be used in a parents specifier.",
                "The borders displayed between views when multiple groups are visible",
                "Control over the display of the viewport projection on the minimap",
                "Code folding buttons in the gutter",
                "The primary container for the auto complete popup",
                "The primary container for the HTML popups used by _Show Definitions_ and third-party packages. The tint of the scroll bar will be set to the background color of the HTML document.",
                "The data table for completion data. The tint is set based on the background color of the color scheme applied to the view the popup is displayed in.",
                "A row in `auto_complete`",
                "A container around the auto_complete_label",
                "Text in a `table_row`",
                "The \"annotation\" hint displayed at the right-hand-side of a `table_row`",
                "A detail pane displayed below the list of auto complete items, containing the `auto_complete_info` spacer, with `auto_complete_kind_name_label` and `auto_complete_details` inside",
                "Provides spacing between `auto_complete_kind_name_label` and `auto_complete_details`",
                "A label used to display the name of the auto complete kind",
                "A single-line HTML control used to display the details of the auto complete item",
                "The container for the Find and Incremental Find panels.",
                "The container for the Replace panel.",
                "The container for the Find in Files panel.",
                "The container for the input panel, which is available via the API and used for things like file renaming.",
                "The container for the Console.",
                "The container for the output panel, which is available via the API and used for build results.",
                "The container for the input in the Switch Project window.",
                "The layout grid used to position inputs on the various panels.",
                "The button to close the open panel",
                "",
                "The panel switcher button on the left side of the status bar",
                "The sidebar/panel switcher button on the left side of the status bar",
                "The area that contains the current status message",
                "The status buttons that display, and allow changing, the indentation, syntax, encoding and line endings",
                "The container holding the `vcs_branch_icon`, `label_control` with the current branch name, and `vcs_changes_annotation` control",
                "An icon shown to the left of the current branch name",
                "Displays the number of files that have been added, modified or deleted",
                "The Indexer Status and Update windows both use this class for the window background",
                "The progress bar container. The progress bar is displayed in the Update window used for updates on OS X and Windows.",
                "The bar representing the progress completed so far",
                "The scroll area contains the element being scrolled, along with the bar, track and puck.",
                "The scroll bar contains the scroll track. The tint is set based on the background color of the element being scrolled.",
                "The track that the puck runs along. The tint is set based on the background color of the element being scrolled.",
                "The dead space in the bottom right of a scroll_area_control when both the vertical and horizontal scroll bars are being shown.",
                "The scroll puck, or handle. The tint is set based on the background color of the element being scrolled.",
                "The text input used by the Quick Panel, Find, Replace, Find in Files and Input panels.",
                "The button to close the open panel",
                "Text buttons",
                "A grid controlling the spacing of related icon buttons",
                "Small icon-based buttons in the Find, Find in Files, and Replace panels",
                "The button to enable regex mode in the Find, Find in Files and Replace panels",
                "The button to enable case-sensitive mode in the Find, Find in Files and Replace panels",
                "The button to enable whole-word mode in the Find, Find in Files and Replace panels",
                "The button to enable search wrapping when using the Find and Replace panels",
                "The button to only search in the selection when using the Find and Replace panels",
                "The button to enable highlighting all matches in the Find and Replace panels",
                "The button to enable preserve-case mode when using the Replace panel",
                "The button to show context around matches when using the Find in Files panel",
                "The button to display results in a buffer, instead of an output panel, when using the Find in Files panel",
                "Labels are shown in the Find, Replace, Find in File and Input panels. Additionally, labels are used in the Update window, on textual buttons and for the text in the status_container.\n\n_ Targeting specific labels can be accomplished by using the `parents` key._",
                "The title label is used in the About window.",
                "Tool tips shown when hovering over tabs and buttons",
                "Text shown in a tool tip",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
            ],
            "type": "string"
        },
        "COLOR": {
            "anyOf": [
                {
                    "format": "color",
                    "type": "string"
                },
                {
                    "enum": [
                        "var(--background)",
                        "var(--foreground)",
                        "var(--accent)",
                        "var(--redish)",
                        "var(--orangish)",
                        "var(--yellowish)",
                        "var(--greenish)",
                        "var(--cyanish)",
                        "var(--bluish)",
                        "var(--purplish)",
                        "var(--pinkish)"
                    ],
                    "type": "string"
                },
                {
                    "items": {
                        "type": [
                            "string",
                            "number"
                        ]
                    },
                    "type": "array"
                }
            ]
        },
        "DATA_TABLE_PROPERTIES": {
            "dark_content": {
                "markdownDescription": "if the background is dark \u2013 used to set the `dark` attribute for scrollbars",
                "type": "boolean"
            },
            "row_padding": {
                "$ref": "#/definitions/SPACING"
            }
        },
        "FILTER_LABEL_PROPERTIES": {
            "bg": {
                "$ref": "#/definitions/COLOR"
            },
            "fg": {
                "$ref": "#/definitions/COLOR"
            },
            "font.face": {
                "markdownDescription": "the name of the font face",
                "type": "string"
            },
            "font.size": {
                "markdownDescription": "an integer point size",
                "type": "integer"
            },
            "match_fg": {
                "$ref": "#/definitions/COLOR"
            },
            "selected_fg": {
                "$ref": "#/definitions/COLOR"
            },
            "selected_match_fg": {
                "$ref": "#/definitions/COLOR"
            }
        },
        "FONT_PROPERTIES": {
            "font.bold": {
                "markdownDescription": "a boolean, if the font should be bold",
                "type": "boolean"
            },
            "font.face": {
                "markdownDescription": "the name of the font face",
                "type": "string"
            },
            "font.italic": {
                "markdownDescription": "a boolean, if the font should be italic",
                "type": "boolean"
            },
            "font.size": {
                "markdownDescription": "an integer point size",
                "type": "integer"
            },
            "viewport_color": {
                "$ref": "#/definitions/COLOR"
            }
        },
        "PARENTS": {
            "items": {
                "properties": {
                    "attributes": {
                        "$ref": "#/definitions/ATTRIBUTES"
                    },
                    "class": {
                        "$ref": "#/definitions/CLASS_NAMES"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "PLATFORMS": {
            "items": {
                "enum": [
                    "osx",
                    "windows",
                    "linux"
                ],
                "type": "string"
            },
            "type": "array"
        },
        "RULE": {
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "title_bar"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "file_light",
                                                "!file_light",
                                                "file_medium",
                                                "!file_medium",
                                                "file_medium_dark",
                                                "!file_medium_dark",
                                                "file_dark",
                                                "!file_dark",
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "`V` from `0.60-1.00`",
                                                "Opposite of `file_light`",
                                                "`V` from `0.30-0.59`",
                                                "Opposite of `file_medium`",
                                                "`V` from `0.10-0.29`",
                                                "Opposite of `file_medium_dark`",
                                                "`V` from `0.00-0.09`",
                                                "Opposite of `file_dark`",
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "bg": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "fg": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "style": {
                                        "default": "system",
                                        "enum": [
                                            "system",
                                            "dark",
                                            "light"
                                        ],
                                        "markdownDescription": "The OS style to use for the title bar",
                                        "markdownEnumDescriptions": [
                                            "default",
                                            "Mac/Linux only",
                                            "Mac only"
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "window"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "file_light",
                                                "!file_light",
                                                "file_medium",
                                                "!file_medium",
                                                "file_medium_dark",
                                                "!file_medium_dark",
                                                "file_dark",
                                                "!file_dark"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "`V` from `0.60-1.00`",
                                                "Opposite of `file_light`",
                                                "`V` from `0.30-0.59`",
                                                "Opposite of `file_medium`",
                                                "`V` from `0.10-0.29`",
                                                "Opposite of `file_medium_dark`",
                                                "`V` from `0.00-0.09`",
                                                "Opposite of `file_dark`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "sidebar_container"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "sidebar_tree"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/DATA_TABLE_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "indent": {
                                        "markdownDescription": "an integer amount to indent each level of the tree structure",
                                        "type": "integer"
                                    },
                                    "indent_offset": {
                                        "markdownDescription": "an additional indent applied to every row, for the sake of positioning `disclosure_button_control` and `close_button`",
                                        "type": "integer"
                                    },
                                    "indent_top_level": {
                                        "markdownDescription": "a boolean if top-level rows in the tree should be indented",
                                        "type": "boolean"
                                    },
                                    "spacer_rows": {
                                        "markdownDescription": "a boolean controlling if a blank row should be added between the _Open Files_ and _Folders_ sections of the sidebar, when both are visible.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tree_row"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "selectable",
                                                "!selectable",
                                                "selected",
                                                "!selected",
                                                "expandable",
                                                "!expandable",
                                                "expanded",
                                                "!expanded"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when a row is selectable",
                                                "Opposite of `selectable`",
                                                "when an selectable row is selected",
                                                "Opposite of `selected`",
                                                "when a row is expandable",
                                                "Opposite of `expandable`",
                                                "when an expandable row is expanded",
                                                "Opposite of `expanded`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "sidebar_heading"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "case": {
                                        "default": "upper",
                                        "enum": [
                                            "upper",
                                            "lower",
                                            "title"
                                        ],
                                        "type": "string"
                                    },
                                    "fg": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "file_system_entry"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "ignored",
                                                "!ignored",
                                                "untracked",
                                                "!untracked",
                                                "modified",
                                                "!modified",
                                                "missing",
                                                "!missing",
                                                "added",
                                                "!added",
                                                "staged",
                                                "!staged",
                                                "deleted",
                                                "!deleted",
                                                "unmerged",
                                                "!unmerged"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "**Files**: when a file is ignored\n\n**Folders**: when the entire folder is ignored",
                                                "Opposite of `ignored`",
                                                "**Files**: when a file is new or not recognized\n\n**Folders**: when a folder contains one or more untracked files",
                                                "Opposite of `untracked`",
                                                "**Files**: when a file has been changed on disk\n\n**Folders**: when a folder contains one or more modified files",
                                                "Opposite of `modified`",
                                                "**Folders**: when one or more of a folder\u2018s files is no longer on disk",
                                                "Opposite of `missing`",
                                                "**Files**: when a new file has been newly added to the index\n\n**Folders**: when a folder contains one or more added files",
                                                "Opposite of `added`",
                                                "**Files**: when a modified file has been added to the index\n\n**Folders**: when a folder contains one or more staged files",
                                                "Opposite of `staged`",
                                                "**Folders**: when one or more of a folder\u2018s files has been added to the index for removal",
                                                "Opposite of `deleted`",
                                                "**Files**: when a file is in a conflict state and needs to be resolved\n\n**Folders**: when a folder contains one or more unmerged files",
                                                "Opposite of `unmerged`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "spacing": {
                                        "markdownDescription": "an integer number of pixels between each contained control",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "sidebar_label"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "fg": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "close_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "disclosure_button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_folder"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_folder_loading"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_folder_dup"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_file_type"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "vcs_status_badge"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "ignored",
                                                "!ignored",
                                                "untracked",
                                                "!untracked",
                                                "modified",
                                                "!modified",
                                                "missing",
                                                "!missing",
                                                "added",
                                                "!added",
                                                "staged",
                                                "!staged",
                                                "deleted",
                                                "!deleted",
                                                "unmerged",
                                                "!unmerged"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "**Files**: when a file is ignored\n\n**Folders**: when the entire folder is ignored",
                                                "Opposite of `ignored`",
                                                "**Files**: when a file is new or not recognized\n\n**Folders**: when a folder contains one or more untracked files",
                                                "Opposite of `untracked`",
                                                "**Files**: when a file has been changed on disk\n\n**Folders**: when a folder contains one or more modified files",
                                                "Opposite of `modified`",
                                                "**Folders**: when one or more of a folder\u2018s files is no longer on disk",
                                                "Opposite of `missing`",
                                                "**Files**: when a new file has been newly added to the index\n\n**Folders**: when a folder contains one or more added files",
                                                "Opposite of `added`",
                                                "**Files**: when a modified file has been added to the index\n\n**Folders**: when a folder contains one or more staged files",
                                                "Opposite of `staged`",
                                                "**Folders**: when one or more of a folder\u2018s files has been added to the index for removal",
                                                "Opposite of `deleted`",
                                                "**Files**: when a file is in a conflict state and needs to be resolved\n\n**Folders**: when a folder contains one or more unmerged files",
                                                "Opposite of `unmerged`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tabset_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "file_light",
                                                "!file_light",
                                                "file_medium",
                                                "!file_medium",
                                                "file_medium_dark",
                                                "!file_medium_dark",
                                                "file_dark",
                                                "!file_dark",
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "`V` from `0.60-1.00`",
                                                "Opposite of `file_light`",
                                                "`V` from `0.30-0.59`",
                                                "Opposite of `file_medium`",
                                                "`V` from `0.10-0.29`",
                                                "Opposite of `file_medium_dark`",
                                                "`V` from `0.00-0.09`",
                                                "Opposite of `file_dark`",
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "mouse_wheel_switch": {
                                        "markdownDescription": "if the mouse wheel should switch tabs \u2013 this should only be set to `true` if the setting `enable_tab_scrolling` is `false`",
                                        "type": "boolean"
                                    },
                                    "tab_height": {
                                        "markdownDescription": "the height of the tabs in DIPs",
                                        "type": "integer"
                                    },
                                    "tab_min_width": {
                                        "markdownDescription": "the minimum tab width before tab scrolling occurs",
                                        "type": "integer"
                                    },
                                    "tab_overlap": {
                                        "markdownDescription": "how many DIPs the tabs should overlap",
                                        "type": "integer"
                                    },
                                    "tab_width": {
                                        "markdownDescription": "default tab width when space is available",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tab_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "accent_tint_index": {
                                        "markdownDescription": "Controls which layer the accent tint is applied to. Must be an integer from `0` to `3`. The accent color is specified by the color scheme.",
                                        "maximum": 3,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "accent_tint_modifier": {
                                        "items": [
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            }
                                        ],
                                        "markdownDescription": "An array of four integers in the range `0` to `255`. The first three are blended into the RGB values from the accent tint color with the fourth value specifying how much of these RGB modifier values to apply.",
                                        "type": "array"
                                    },
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "file_light",
                                                "!file_light",
                                                "file_medium",
                                                "!file_medium",
                                                "file_medium_dark",
                                                "!file_medium_dark",
                                                "file_dark",
                                                "!file_dark",
                                                "hover",
                                                "!hover",
                                                "dirty",
                                                "!dirty",
                                                "selected",
                                                "!selected",
                                                "transient",
                                                "!transient"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "`V` from `0.60-1.00`",
                                                "Opposite of `file_light`",
                                                "`V` from `0.30-0.59`",
                                                "Opposite of `file_medium`",
                                                "`V` from `0.10-0.29`",
                                                "Opposite of `file_medium_dark`",
                                                "`V` from `0.00-0.09`",
                                                "Opposite of `file_dark`",
                                                "",
                                                "Opposite of `hover`",
                                                "when the associated view has unsaved changed",
                                                "Opposite of `dirty`",
                                                "when the associated view is the active view in its group",
                                                "Opposite of `selected`",
                                                "when the associate view is a preview and not fully opened",
                                                "Opposite of `transient`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "max_margin_trim": {
                                        "markdownDescription": "how much of the left and right `content_margin` may be removed when tab space is extremely limited"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tab_label"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "transient",
                                                "!transient"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the associate view is a preview and not fully opened",
                                                "Opposite of `transient`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "fg": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tab_close_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "accent_tint_index": {
                                        "markdownDescription": "Controls which layer the accent tint is applied to. Must be an integer from `0` to `3`. The accent color is specified by the color scheme.",
                                        "maximum": 3,
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "accent_tint_modifier": {
                                        "items": [
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            },
                                            {
                                                "maximum": 255,
                                                "minimum": 0,
                                                "type": "integer"
                                            }
                                        ],
                                        "markdownDescription": "An array of four integers in the range `0` to `255`. The first three are blended into the RGB values from the accent tint color with the fourth value specifying how much of these RGB modifier values to apply.",
                                        "type": "array"
                                    },
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "scroll_tabs_left_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "scroll_tabs_right_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "show_tabs_dropdown_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control goto_file"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control goto_symbol"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control goto_symbol_in_project"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control goto_line"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control goto_word"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "overlay_control command_palette"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "quick_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/DATA_TABLE_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "mini_quick_panel_row"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "selected",
                                                "!selected"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the row is selected",
                                                "Opposite of `selected`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "quick_panel_row"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "selected",
                                                "!selected"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the row is selected",
                                                "Opposite of `selected`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_ambiguous"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_keyword"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_type"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_function"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_namespace"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_navigation"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_markup"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_variable"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_container kind_snippet"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "kind_label"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "symbol_container"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "quick_panel_label"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/FILTER_LABEL_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "quick_panel_path_label"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/FILTER_LABEL_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "text_area_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "file_light",
                                                "!file_light",
                                                "file_medium",
                                                "!file_medium",
                                                "file_medium_dark",
                                                "!file_medium_dark",
                                                "file_dark",
                                                "!file_dark"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "`V` from `0.60-1.00`",
                                                "Opposite of `file_light`",
                                                "`V` from `0.30-0.59`",
                                                "Opposite of `file_medium`",
                                                "`V` from `0.10-0.29`",
                                                "Opposite of `file_medium_dark`",
                                                "`V` from `0.00-0.09`",
                                                "Opposite of `file_dark`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "grid_layout_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "border_color": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "border_size": {
                                        "markdownDescription": "an integer of the border size in DIPs",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "minimap_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "viewport_color": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "viewport_opacity": {
                                        "markdownDescription": "a float from 0.0 to 1.0 specifying the opacity of the viewport projection",
                                        "maximum": 1,
                                        "minimum": 0,
                                        "type": "number"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "fold_button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "expanded",
                                                "!expanded"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when a section of code is unfolded ",
                                                "Opposite of `expanded`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/DATA_TABLE_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/TEXTURE_TINTING_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "table_row"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "selected",
                                                "!selected"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the user has highlighted a completion",
                                                "Opposite of `selected`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "trigger_container"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete_label"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/FILTER_LABEL_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "fg_blend": {
                                        "markdownDescription": "a boolean controlling if the `fg`, `match_fg`, `selected_fg`, and `selected_match_fg` values should be blended onto the foreground color from the color scheme of the current view",
                                        "type": "boolean"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete_label auto_complete_hint"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "fg_blend": {
                                        "markdownDescription": "a boolean controlling if the `fg`, `match_fg`, `selected_fg`, and `selected_match_fg` values should be blended onto the foreground color from the color scheme of the current view",
                                        "type": "boolean"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete_detail_pane"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete_info"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "spacing": {
                                        "markdownDescription": "an integer number of pixels between each contained control",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete_label auto_complete_hint"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/STYLED_LABEL_PROPERTIES"
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "auto_complete_details"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "color": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "font.face": {
                                        "markdownDescription": "the name of the font face",
                                        "type": "string"
                                    },
                                    "font.size": {
                                        "markdownDescription": "an integer point size",
                                        "type": "integer"
                                    },
                                    "link_color": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "monospace_background_color": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "monospace_color": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control find_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control replace_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control find_in_files_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control input_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control console_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control output_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_control switch_project_panel"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_grid_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "inside_spacing": {
                                        "markdownDescription": "an integer padding to place between each cell of the grid",
                                        "type": "integer"
                                    },
                                    "outside_hspacing": {
                                        "markdownDescription": "an integer padding to place to the left and right of the grid",
                                        "type": "integer"
                                    },
                                    "outside_vspacing": {
                                        "markdownDescription": "an integer padding to place above and below the grid",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_close_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "status_bar"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "panel_visible",
                                                "!panel_visible"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when a panel is displayed above the status bar",
                                                "Opposite of `panel_visible`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "panel_button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "sidebar_button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "status_container"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "status_button"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "min_size": {
                                        "items": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "integer"
                                            }
                                        ],
                                        "markdownDescription": "an array of two integers specifying the minimum width and height of a button, in DIPs",
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "vcs_status"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "spacing": {
                                        "markdownDescription": "an integer number of pixels between each contained control",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "vcs_branch_icon"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "vcs_changes_annotation"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/STYLED_LABEL_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "dialog"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "progress_gauge_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "scroll_area_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "scrollable",
                                                "!scrollable",
                                                "hscrollable",
                                                "!hscrollable"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the control can be scrolled vertically",
                                                "Opposite of `scrollable`",
                                                "when the control can be scrolled horizontally",
                                                "Opposite of `hscrollable`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "bottom_shadow": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "bottom_shadow_size": {
                                        "markdownDescription": "in integer of the height of the shadow to draw when the area can be scrolled to the bottom",
                                        "type": "integer"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "left_shadow": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "left_shadow_size": {
                                        "markdownDescription": "in integer of the width of the shadow to draw when the area can be scrolled to the left",
                                        "type": "integer"
                                    },
                                    "overlay": {
                                        "markdownDescription": "sets the scroll bars to be rendered on top of the content",
                                        "type": "boolean"
                                    },
                                    "right_shadow": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "right_shadow_size": {
                                        "markdownDescription": "in integer of the width of the shadow to draw when the area can be scrolled to the right",
                                        "type": "integer"
                                    },
                                    "top_shadow": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "top_shadow_size": {
                                        "markdownDescription": "in integer of the height of the shadow to draw when the area can be scrolled to the top",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "scroll_bar_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/TEXTURE_TINTING_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "dark",
                                                "!dark",
                                                "horizontal",
                                                "!horizontal"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the scroll area content is dark, necessitating a light scroll bar",
                                                "Opposite of `dark`",
                                                "when the scroll bar should be horizontal instead of vertical",
                                                "Opposite of `horizontal`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "scroll_track_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/TEXTURE_TINTING_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "dark",
                                                "!dark",
                                                "horizontal",
                                                "!horizontal"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the scroll area content is dark, necessitating a light scroll bar",
                                                "Opposite of `dark`",
                                                "when the scroll bar should be horizontal instead of vertical",
                                                "Opposite of `horizontal`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "scroll_corner_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/TEXTURE_TINTING_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "dark",
                                                "!dark"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the scroll area content is dark, necessitating a light scroll bar",
                                                "Opposite of `dark`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "puck_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/TEXTURE_TINTING_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "dark",
                                                "!dark",
                                                "horizontal",
                                                "!horizontal"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when the scroll area content is dark, necessitating a light scroll bar",
                                                "Opposite of `dark`",
                                                "when the scroll bar should be horizontal instead of vertical",
                                                "Opposite of `horizontal`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "text_line_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "color_scheme_tint": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "color_scheme_tint_2": {
                                        "$ref": "#/definitions/COLOR"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "dropdown_button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "pressed",
                                                "!pressed"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "set when a button is pressed down",
                                                "Opposite of `pressed`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    },
                                    "min_size": {
                                        "items": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "integer"
                                            }
                                        ],
                                        "markdownDescription": "an array of two integers specifying the minimum width and height of a button, in DIPs",
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_button_group"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "spacing": {
                                        "markdownDescription": "an integer number of pixels between each button in the group",
                                        "type": "integer"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_button_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover",
                                                "selected",
                                                "!selected",
                                                "left",
                                                "!left",
                                                "right",
                                                "!right"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`",
                                                "when an icon button is toggled on",
                                                "Opposite of `selected`",
                                                "when the button is the left-most button in a group",
                                                "Opposite of `left`",
                                                "when the button is the right-most button in a group",
                                                "Opposite of `right`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_regex"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_case"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_whole_word"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_wrap"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_in_selection"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_highlight"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_preserve_case"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_context"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "icon_use_buffer"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "label_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "color": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "title_label_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "color": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tool_tip_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "content_margin": {
                                        "$ref": "#/definitions/SPACING"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                },
                {
                    "if": {
                        "properties": {
                            "class": {
                                "const": "tool_tip_label_control"
                            }
                        }
                    },
                    "then": {
                        "allOf": [
                            {
                                "properties": {
                                    "$ref": "#/definitions/SHADOW_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "$ref": "#/definitions/FONT_PROPERTIES"
                                }
                            },
                            {
                                "properties": {
                                    "attributes": {
                                        "items": {
                                            "enum": [
                                                "hover",
                                                "!hover"
                                            ],
                                            "markdownEnumDescriptions": [
                                                "",
                                                "Opposite of `hover`"
                                            ],
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "color": {
                                        "$ref": "#/definitions/COLOR"
                                    }
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                }
            ],
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/ATTRIBUTES"
                },
                "class": {
                    "$ref": "#/definitions/CLASS_NAMES"
                },
                "layer0.draw_center": {
                    "markdownDescription": "a boolean that controls if the center rectangle of the 9-grid created via `layer#.inner_margin` should be drawn. This is an optimization that allows skipping an unused section of texture.",
                    "type": "boolean"
                },
                "layer0.inner_margin": {
                    "$ref": "#/definitions/SPACING"
                },
                "layer0.opacity": {
                    "markdownDescription": "a float value from `0.0` to `1.0` that controls the master opacity of the layer.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "layer0.repeat": {
                    "markdownDescription": "a boolean that controls if the texture should be repeated instead of stretched. ",
                    "type": "boolean"
                },
                "layer0.texture": {
                    "markdownDescription": "a string of the file path to a PNG image, relative to the `Packages/` folder",
                    "type": "string"
                },
                "layer0.tint": {
                    "$ref": "#/definitions/COLOR"
                },
                "layer1.draw_center": {
                    "markdownDescription": "a boolean that controls if the center rectangle of the 9-grid created via `layer#.inner_margin` should be drawn. This is an optimization that allows skipping an unused section of texture.",
                    "type": "boolean"
                },
                "layer1.inner_margin": {
                    "$ref": "#/definitions/SPACING"
                },
                "layer1.opacity": {
                    "markdownDescription": "a float value from `0.0` to `1.0` that controls the master opacity of the layer.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "layer1.repeat": {
                    "markdownDescription": "a boolean that controls if the texture should be repeated instead of stretched. ",
                    "type": "boolean"
                },
                "layer1.texture": {
                    "markdownDescription": "a string of the file path to a PNG image, relative to the `Packages/` folder",
                    "type": "string"
                },
                "layer1.tint": {
                    "$ref": "#/definitions/COLOR"
                },
                "layer2.draw_center": {
                    "markdownDescription": "a boolean that controls if the center rectangle of the 9-grid created via `layer#.inner_margin` should be drawn. This is an optimization that allows skipping an unused section of texture.",
                    "type": "boolean"
                },
                "layer2.inner_margin": {
                    "$ref": "#/definitions/SPACING"
                },
                "layer2.opacity": {
                    "markdownDescription": "a float value from `0.0` to `1.0` that controls the master opacity of the layer.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "layer2.repeat": {
                    "markdownDescription": "a boolean that controls if the texture should be repeated instead of stretched. ",
                    "type": "boolean"
                },
                "layer2.texture": {
                    "markdownDescription": "a string of the file path to a PNG image, relative to the `Packages/` folder",
                    "type": "string"
                },
                "layer2.tint": {
                    "$ref": "#/definitions/COLOR"
                },
                "layer3.draw_center": {
                    "markdownDescription": "a boolean that controls if the center rectangle of the 9-grid created via `layer#.inner_margin` should be drawn. This is an optimization that allows skipping an unused section of texture.",
                    "type": "boolean"
                },
                "layer3.inner_margin": {
                    "$ref": "#/definitions/SPACING"
                },
                "layer3.opacity": {
                    "markdownDescription": "a float value from `0.0` to `1.0` that controls the master opacity of the layer.",
                    "maximum": 1,
                    "minimum": 0,
                    "type": "number"
                },
                "layer3.repeat": {
                    "markdownDescription": "a boolean that controls if the texture should be repeated instead of stretched. ",
                    "type": "boolean"
                },
                "layer3.texture": {
                    "markdownDescription": "a string of the file path to a PNG image, relative to the `Packages/` folder",
                    "type": "string"
                },
                "layer3.tint": {
                    "$ref": "#/definitions/COLOR"
                },
                "parents": {
                    "$ref": "#/definitions/PARENTS"
                },
                "platforms": {
                    "$ref": "#/definitions/PLATFORMS"
                },
                "settings": {
                    "$ref": "#/definitions/SETTINGS"
                }
            },
            "type": "object"
        },
        "SETTINGS": {
            "items": {
                "anyOf": [
                    {
                        "enum": [
                            "overlay_scroll_bars",
                            "!overlay_scroll_bars",
                            "always_show_minimap_viewport",
                            "!always_show_minimap_viewport",
                            "bold_folder_labels",
                            "!bold_folder_labels",
                            "mouse_wheel_switches_tabs",
                            "!mouse_wheel_switches_tabs",
                            "highlight_modified_tabs",
                            "!highlight_modified_tabs",
                            "show_tab_close_buttons",
                            "!show_tab_close_buttons"
                        ],
                        "markdownEnumDescriptions": [
                            "this should affect the style of the scroll bars \u2013 generally they should be semi-transparent and the `overlay` property of the `scroll_area_control` should be set to `true`",
                            "Opposite of `overlay_scroll_bars`",
                            "if the current viewport area should be highlighted on the minimap even when the user is not hovering over the minimap.",
                            "Opposite of `always_show_minimap_viewport`",
                            "if folder names in the side bar should have the `font.bold` property set to `true`.",
                            "Opposite of `bold_folder_labels`",
                            "this is used to control mouse wheel behavior of tabs on Linux. It should be combined with checking for `!enable_tab_scrolling` to change the `mouse_wheel_switch` key of the `tabset_control` to `false`. ",
                            "Opposite of `mouse_wheel_switches_tabs`",
                            "if the tabs of modified files should be highlighted. This setting should be checked in addition to the `dirty` attribute.",
                            "Opposite of `highlight_modified_tabs`",
                            "if tabs should have close buttons",
                            "Opposite of `show_tab_close_buttons`"
                        ],
                        "type": "string"
                    },
                    {
                        "type": "string"
                    }
                ]
            },
            "markdownDescription": "Certain Sublime Text settings are design to influence the UI. Themes should respect these settings and change elements based on them.",
            "type": "array"
        },
        "SHADOW_PROPERTIES": {
            "shadow_color": {
                "$ref": "#/definitions/COLOR"
            },
            "shadow_offset": {
                "items": [
                    {
                        "type": "integer"
                    },
                    {
                        "type": "integer"
                    }
                ],
                "markdownDescription": "a 2-element array containing the X and Y offsets of the shadow",
                "type": "array"
            }
        },
        "SPACING": {
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "additionalItems": false,
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "type": "array"
                },
                {
                    "additionalItems": false,
                    "items": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "type": "array"
                }
            ],
            "markdownDescription": "Padding and margin may be specified in one of three ways:\n\n - A single integer value \u2013 the same value is applied to the left, top, right and bottom\n\n - An array of two integers \u2013 the first value is applied to the left and right, while the second value is applied to the top and bottom\n\n - An array of four integers \u2013 the values are applied, in order, to the left, top, right and bottom"
        },
        "STYLED_LABEL_PROPERTIES": {
            "background_color": {
                "$ref": "#/definitions/COLOR"
            },
            "border_color": {
                "$ref": "#/definitions/COLOR"
            }
        },
        "TEXTURE_TINTING_PROPERTIES": {
            "tint_index": {
                "markdownDescription": "Controls which layer the tint is applied to. Must be an integer from `0` to `3`.",
                "maximum": 3,
                "minimum": 0,
                "type": "integer"
            },
            "tint_modifier": {
                "markdownDescription": "An array of four integers in the range `0` to `255`. The first three are blended into the RGB values from the tint color with the fourth value specifying how much of these RGB modifier values to apply.",
                "maximum": 255,
                "minimum": 0,
                "type": "integer"
            }
        }
    },
    "oneOf": [
        {
            "additionalProperties": false,
            "properties": {
                "extends": {
                    "default": "Default.sublime-theme",
                    "markdownDescription": "Any variables from the extending theme will override variables with the same name in the base theme. Variable overrides will affect rules both in the base theme and the extending theme.",
                    "type": "string"
                },
                "rules": {
                    "items": {
                        "$ref": "#/definitions/RULE"
                    },
                    "type": "array"
                },
                "variables": {
                    "additionalProperties": {
                        "format": "color",
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        {
            "items": {
                "$ref": "#/definitions/RULE"
            },
            "type": "array"
        }
    ],
    "title": "Sublime Text Theme"
}